class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        if not heights:
            return []
        m,n = len(heights),len(heights[0])
        def bfs(starts):
            q = deque(starts)
            visited = set(starts)
            while q:
                r,c = q.popleft()
                for dr,dc in [(1,0),(-1,0),(0,1),(0,-1)]:
                    nr,nc = r + dr,c + dc
                    if(0 <= nr < m and 0 <= nc < n and (nr,nc) not in visited and heights[nr][nc] >= heights[r][c]):
                        visited.add((nr,nc))
                        q.append((nr,nc))
            return visited
        pacific_starts = [(0,j) for j in range(n)] + [(i,0) for i in range(m)]
        atlantic_starts = [(m-1,j) for j in range(n)] + [(i,n-1) for i in range(m)]
        pacific_reach = bfs(pacific_starts)
        atlantic_reach = bfs(atlantic_starts)
        return list(pacific_reach & atlantic_reach)
